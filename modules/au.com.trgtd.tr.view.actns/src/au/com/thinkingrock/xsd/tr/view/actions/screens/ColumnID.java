//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-520
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2008.02.14 at 10:19:02 AM EST
//
package au.com.thinkingrock.xsd.tr.view.actions.screens;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
import au.com.trgtd.tr.view.actns.screens.columns.ActionsColumn;

/**
 * <p>Java class for ColumnID.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ColumnID">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="icon"/>
 *     &lt;enumeration value="done"/>
 *     &lt;enumeration value="descr"/>
 *     &lt;enumeration value="delegated-to"/>
 *     &lt;enumeration value="created-date"/>
 *     &lt;enumeration value="done-date"/>
 *     &lt;enumeration value="action-date"/>
 *     &lt;enumeration value="context"/>
 *     &lt;enumeration value="time"/>
 *     &lt;enumeration value="energy"/>
 *     &lt;enumeration value="priority"/>
 *     &lt;enumeration value="topic"/>
 *     &lt;enumeration value="from-icon"/>
 *     &lt;enumeration value="from-descr"/>
 *     &lt;enumeration value="from-topic"/>
 *     &lt;enumeration value="start-date"/>
 *     &lt;enumeration value="due-date"/>
 *     &lt;enumeration value="followup-date"/>
 *     &lt;enumeration value="schedule-date"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "ColumnID")
@XmlEnum
public enum ColumnID {
    
    @XmlEnumValue("icon")
    ICON("icon"),
    @XmlEnumValue("done")
    DONE("done"),
    @XmlEnumValue("descr")
    DESCR("descr"),
    @XmlEnumValue("delegated-to")
    DELEGATED_TO("delegated-to"),
    @XmlEnumValue("created-date")
    CREATED_DATE("created-date"),
    @XmlEnumValue("done-date")
    DONE_DATE("done-date"),
    @XmlEnumValue("action-date")
    ACTION_DATE("action-date"),
    @XmlEnumValue("context")
    CONTEXT("context"),
    @XmlEnumValue("time")
    TIME("time"),
    @XmlEnumValue("energy")
    ENERGY("energy"),
    @XmlEnumValue("priority")
    PRIORITY("priority"),
    @XmlEnumValue("topic")
    TOPIC("topic"),
    @XmlEnumValue("from-icon")
    FROM_ICON("from-icon"),
    @XmlEnumValue("from-descr")
    FROM_DESCR("from-descr"),
    @XmlEnumValue("from-topic")
    FROM_TOPIC("from-topic"),
    @XmlEnumValue("start-date")
    START_DATE("start-date"),
    @XmlEnumValue("due-date")
    DUE_DATE("due-date"),
    @XmlEnumValue("followup-date")
    FOLLOWUP_DATE("followup-date"),
    @XmlEnumValue("schedule-date")
    SCHEDULE_DATE("schedule-date"),
    @XmlEnumValue("schedule-duration")
    SCHEDULE_DURATION("schedule-duration"),
    @XmlEnumValue("project-path")
    PROJECT_PATH("project-path"),
    @XmlEnumValue("top-project")
    TOP_PROJECT("top-project");
    
    private final String value;
    
    ColumnID(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static ColumnID fromValue(String v) {
        for (ColumnID c: ColumnID.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
    
    public static Map<String, Byte> map;
    
    public synchronized byte index() {
        if (map == null) {
            map = new HashMap<>();
            map.put(ICON.value, ActionsColumn.INDEX_ICON);
            map.put(DONE.value, ActionsColumn.INDEX_DONE);
            map.put(DESCR.value, ActionsColumn.INDEX_DESCR);
            map.put(DELEGATED_TO.value, ActionsColumn.INDEX_DELEGATED_TO);
            map.put(CREATED_DATE.value, ActionsColumn.INDEX_CREATED_DATE);
            map.put(DONE_DATE.value, ActionsColumn.INDEX_DONE_DATE);
            map.put(ACTION_DATE.value, ActionsColumn.INDEX_ACTION_DATE);
            map.put(CONTEXT.value, ActionsColumn.INDEX_CONTEXT);
            map.put(TIME.value, ActionsColumn.INDEX_TIME);
            map.put(ENERGY.value, ActionsColumn.INDEX_ENERGY);
            map.put(PRIORITY.value, ActionsColumn.INDEX_PRIORITY);
            map.put(TOPIC.value, ActionsColumn.INDEX_TOPIC);
            map.put(FROM_ICON.value, ActionsColumn.INDEX_FROM_ICON);
            map.put(FROM_DESCR.value, ActionsColumn.INDEX_FROM_DESCR);
            map.put(FROM_TOPIC.value, ActionsColumn.INDEX_FROM_TOPIC);
            map.put(START_DATE.value, ActionsColumn.INDEX_START_DATE);
            map.put(DUE_DATE.value, ActionsColumn.INDEX_DUE_DATE);
            map.put(FOLLOWUP_DATE.value, ActionsColumn.INDEX_FOLLOWUP_DATE);
            map.put(SCHEDULE_DATE.value, ActionsColumn.INDEX_SCHEDULE_DATE);
            map.put(SCHEDULE_DURATION.value, ActionsColumn.INDEX_SCHEDULE_DURATION);            
            map.put(PROJECT_PATH.value, ActionsColumn.INDEX_PROJECT_PATH);
            map.put(TOP_PROJECT.value, ActionsColumn.INDEX_TOP_PROJECT);            
        }
        return map.get(value);
    }
    
}
