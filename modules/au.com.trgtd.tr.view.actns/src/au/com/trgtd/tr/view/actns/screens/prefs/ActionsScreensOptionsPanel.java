/*
 * ThinkingRock, a project management tool for Personal Computers. 
 * Copyright (C) 2006 Avente Pty Ltd
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package au.com.trgtd.tr.view.actns.screens.prefs;

import au.com.trgtd.tr.resource.Icons;
import au.com.trgtd.tr.view.actns.screens.ActionsScreen;
import au.com.trgtd.tr.view.actns.screens.ActionsScreens;
import au.com.trgtd.tr.view.actns.screens.dao.ScreensDAO;
import au.com.trgtd.tr.view.actns.screens.dao.ScreensDAOProvider;
import javax.swing.JPanel;
import tr.model.util.Manager;

final class ActionsScreensOptionsPanel extends JPanel {
    
    ActionsScreensOptionsPanel(ActionsScreensOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        toolbar = new javax.swing.JToolBar();
        addButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();

        setBackground(java.awt.Color.white);
        setPreferredSize(new java.awt.Dimension(580, 430));

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableScrollPane.setViewportView(table);

        toolbar.setFloatable(false);
        toolbar.setOrientation(1);
        toolbar.setMargin(new java.awt.Insets(2, 2, 2, 2));

        addButton.setIcon(Icons.Add);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setMaximumSize(new java.awt.Dimension(24, 24));
        addButton.setMinimumSize(new java.awt.Dimension(24, 24));
        addButton.setPreferredSize(new java.awt.Dimension(24, 24));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        toolbar.add(addButton);

        delButton.setIcon(Icons.Delete);
        delButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delButton.setMaximumSize(new java.awt.Dimension(24, 24));
        delButton.setMinimumSize(new java.awt.Dimension(24, 24));
        delButton.setPreferredSize(new java.awt.Dimension(24, 24));
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        toolbar.add(delButton);

        downButton.setIcon(Icons.Down);
        downButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downButton.setMaximumSize(new java.awt.Dimension(24, 24));
        downButton.setMinimumSize(new java.awt.Dimension(24, 24));
        downButton.setPreferredSize(new java.awt.Dimension(24, 24));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downActionPerformed(evt);
            }
        });
        toolbar.add(downButton);

        upButton.setIcon(Icons.Up);
        upButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upButton.setMaximumSize(new java.awt.Dimension(24, 24));
        upButton.setMinimumSize(new java.awt.Dimension(24, 24));
        upButton.setPreferredSize(new java.awt.Dimension(24, 24));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upActionPerformed(evt);
            }
        });
        toolbar.add(upButton);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void selectTableRow(int row) {
        table.changeSelection(row, 0, false, false);
    }
    
    private void upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upActionPerformed
        int row = table.getSelectedRow();
        if (row == -1) return;
        
        ActionsScreensOptionsTableModel tm = (ActionsScreensOptionsTableModel)table.getModel();
        if (tm == null) return;
        
        if (tm.moveUp(row)) {
            selectTableRow(row - 1);
        }
    }//GEN-LAST:event_upActionPerformed
    
    private void downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downActionPerformed
        int row = table.getSelectedRow();
        if (row == -1) return;
        
        ActionsScreensOptionsTableModel tm = (ActionsScreensOptionsTableModel)table.getModel();
        if (tm == null) return;
        
        if (tm.moveDown(row)) {
            selectTableRow(row + 1);
        }
    }//GEN-LAST:event_downActionPerformed
    
    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        int row = table.getSelectedRow();
        if (row == -1) return;
        
        ActionsScreensOptionsTableModel tm = (ActionsScreensOptionsTableModel)table.getModel();
        if (tm == null) return;
        
        if (tm.removeRow(row)) {
            if (row < table.getRowCount()) {
                selectTableRow(row);
            } else if (row > 0) {
                selectTableRow(row - 1);
            }
        }
    }//GEN-LAST:event_removeActionPerformed
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        ActionsScreensOptionsTableModel tm = (ActionsScreensOptionsTableModel)table.getModel();
        if (tm == null) return;
        
        if (tm.addRow()) {
            int row = table.getRowCount() - 1;
            table.changeSelection(row, 0, false, false);
            table.requestFocus();
            table.editCellAt(row, 0);
        }
    }//GEN-LAST:event_addActionPerformed
    
    void load() {
        items = new Manager<>();
        
        ActionsScreens screens = ScreensDAOProvider.instance().provide().getData();
        
        for (ActionsScreen screen : screens.getScreens().list()) {
            items.add(new ActionsScreensItem(screen.toString(), screen));
        }
        
        table.setModel(new ActionsScreensOptionsTableModel(items));
    }
    
    void store() {
        
        Manager<ActionsScreen> screens = new Manager<>();
        
        for (ActionsScreensItem item : items.list()) {
            if (item.screen == null) {
                screens.add(ActionsScreen.create(item.name));
            } else {
                item.screen.setKey(item.name);
                screens.add(item.screen);
            }
        }
        
        ScreensDAO screensDAO = ScreensDAOProvider.instance().provide();
        screensDAO.getData().setScreens(screens);
        try {
            screensDAO.persist();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    boolean valid() {
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton delButton;
    private javax.swing.JButton downButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
    
    private final ActionsScreensOptionsPanelController controller;    
    private Manager<ActionsScreensItem> items;
    
}
