/*
 * ThinkingRock, a project management tool for Personal Computers. 
 * Copyright (C) 2006 Avente Pty Ltd
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package au.com.trgtd.tr.view.filters;

import java.awt.Component;
import java.util.Collections;
import java.util.Vector;
import javax.swing.JDialog;
import org.openide.windows.WindowManager;

/**
 * A multiple choice dialog.
 *
 * @author Jeremy Moore
 */
public class MultiChoiceDialog<T extends Comparable<? super T>> extends JDialog {
    
    /** Creates new form MultiChoiceDialog */
//  public MultiChoiceDialog(Component comp, Vector<T> all, Vector<T> chosen) {
    public MultiChoiceDialog(Component comp, Vector<T> all, Vector<T> chosen, boolean sort) {
        super(WindowManager.getDefault().getMainWindow(), true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.all = all;
        this.sort = sort;
        if (sort) {
            Collections.sort(all);
        }
        setLocationRelativeTo(comp);
        initComponents();
        Vector<T> c = new Vector<>(chosen);
        if (sort) {
            Collections.sort(chosen);
        }
        setChosen(c);
    }
    
    public void setVisible(boolean visible) {
        if (visible) {
            okay = false;
            super.setVisible(true);
        } else {
            super.setVisible(false);
            super.dispose();
        }
    }
    
    public boolean isOkay() {
        return okay;
    }
    
    public void setChosen(Vector<T> chosen) {
        this.chosen = chosen;
        
        choice = new Vector<>();
        
        for (T t : all) {
            if (!chosen.contains(t)) {
                choice.add(t);
            }
        }
        
        if (sort) {
            Collections.sort(choice);
            Collections.sort(chosen);
        }
        
        choiceList.setListData(choice);
        chosenList.setListData(chosen);
    }
    
    public Vector<T> getChosen() {
        return chosen;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        acceptButton = new javax.swing.JButton();
        rejectButton = new javax.swing.JButton();
        acceptAllButton = new javax.swing.JButton();
        rejectAllButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        choiceScrollPane = new javax.swing.JScrollPane();
        choiceList = new javax.swing.JList();
        chosenScrollPane = new javax.swing.JScrollPane();
        chosenList = new javax.swing.JList();
        choiceLabel = new javax.swing.JLabel();
        chosenLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        toolbar.setFloatable(false);
        toolbar.setOrientation(1);
        toolbar.setMargin(new java.awt.Insets(2, 2, 2, 2));

        acceptButton.setFont(new java.awt.Font("Serif", 1, 10));
        acceptButton.setText(">");
        acceptButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        acceptButton.setMaximumSize(new java.awt.Dimension(28, 28));
        acceptButton.setMinimumSize(new java.awt.Dimension(28, 28));
        acceptButton.setPreferredSize(new java.awt.Dimension(28, 28));
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });
        toolbar.add(acceptButton);

        rejectButton.setFont(new java.awt.Font("Serif", 1, 10));
        rejectButton.setText("<");
        rejectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rejectButton.setMaximumSize(new java.awt.Dimension(28, 28));
        rejectButton.setMinimumSize(new java.awt.Dimension(28, 28));
        rejectButton.setPreferredSize(new java.awt.Dimension(28, 28));
        rejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectActionPerformed(evt);
            }
        });
        toolbar.add(rejectButton);

        acceptAllButton.setFont(new java.awt.Font("Serif", 1, 10));
        acceptAllButton.setText(">>");
        acceptAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        acceptAllButton.setMaximumSize(new java.awt.Dimension(28, 28));
        acceptAllButton.setMinimumSize(new java.awt.Dimension(28, 28));
        acceptAllButton.setPreferredSize(new java.awt.Dimension(28, 28));
        acceptAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptAllActionPerformed(evt);
            }
        });
        toolbar.add(acceptAllButton);

        rejectAllButton.setFont(new java.awt.Font("Serif", 1, 10));
        rejectAllButton.setText("<<");
        rejectAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rejectAllButton.setMaximumSize(new java.awt.Dimension(28, 28));
        rejectAllButton.setMinimumSize(new java.awt.Dimension(28, 28));
        rejectAllButton.setPreferredSize(new java.awt.Dimension(28, 28));
        rejectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectAllActionPerformed(evt);
            }
        });
        toolbar.add(rejectAllButton);

        okButton.setText(org.openide.util.NbBundle.getMessage(MultiChoiceDialog.class, "ok")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        choiceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choiceListMouseClicked(evt);
            }
        });
        choiceScrollPane.setViewportView(choiceList);

        chosenList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chosenListMouseClicked(evt);
            }
        });
        chosenScrollPane.setViewportView(chosenList);

        choiceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        choiceLabel.setText(org.openide.util.NbBundle.getMessage(MultiChoiceDialog.class, "available")); // NOI18N

        chosenLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chosenLabel.setText(org.openide.util.NbBundle.getMessage(MultiChoiceDialog.class, "selection")); // NOI18N

        cancelButton.setText(org.openide.util.NbBundle.getMessage(MultiChoiceDialog.class, "cancel")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(choiceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(choiceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chosenScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(chosenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(choiceLabel)
                            .addComponent(chosenLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chosenScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(choiceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void chosenListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chosenListMouseClicked
        if (evt.getClickCount() == 2) {
            rejectSelected();
        }
    }//GEN-LAST:event_chosenListMouseClicked
    
    private void choiceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceListMouseClicked
        if (evt.getClickCount() == 2) {
            acceptSelected();
        }
    }//GEN-LAST:event_choiceListMouseClicked
    
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        okay = true;
        setVisible(false);
    }//GEN-LAST:event_okActionPerformed
    
    private void rejectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectAllActionPerformed
        rejectAll();
    }//GEN-LAST:event_rejectAllActionPerformed
    
    private void acceptAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptAllActionPerformed
        acceptAll();
    }//GEN-LAST:event_acceptAllActionPerformed
    
    private void rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectActionPerformed
        rejectSelected();
    }//GEN-LAST:event_rejectActionPerformed
    
    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed
        acceptSelected();
    }//GEN-LAST:event_acceptActionPerformed
    
    // move selected choice items to chosen
    private synchronized void acceptSelected() {
        try {
            int[] indices = choiceList.getSelectedIndices();
            if (indices == null || indices.length < 1) return;
            
            Vector<T> selected = new Vector<>(indices.length);
            
            for (int i = 0; i < indices.length; i++) {
                selected.add(choice.get(indices[i]));
            }
            
            for (T t : selected) {
                choice.remove(t);
                chosen.add(t);
            }
            
            if (sort) {
                Collections.sort(choice);
                Collections.sort(chosen);
            }
            
            choiceList.setListData(choice);
            chosenList.setListData(chosen);
            
        } catch (IndexOutOfBoundsException ex) {
            // Ignore - happens if you hold shift down and double-click.
        }
    }
    
    // move selected chosen items to available
    private synchronized void rejectSelected() {
        try {
            int[] indices = chosenList.getSelectedIndices();
            if (indices == null || indices.length < 1) return;
            
            Vector<T> selected = new Vector<>(indices.length);
            for (int i = 0; i < indices.length; i++) {
                selected.add(chosen.get(indices[i]));
            }
            
            for (T t : selected) {
                chosen.remove(t);
                choice.add(t);
            }
            
            if (sort) {
                Collections.sort(choice);
                Collections.sort(chosen);
            }
            
            choiceList.setListData(choice);
            chosenList.setListData(chosen);
            
        } catch (IndexOutOfBoundsException ex) {
            // happens if you hold shift down and double-click - ignore
        }
    }
    
    // move all items to chosen
    private synchronized void acceptAll() {
        choice.clear();
        chosen.clear();
        
        for (T t : all) {
            chosen.add(t);
        }
        
        if (sort) {
            Collections.sort(choice);
            Collections.sort(chosen);
        }
        
        choiceList.setListData(choice);
        chosenList.setListData(chosen);
    }
    
    // move all items to choice
    private synchronized void rejectAll() {
        chosen.clear();
        choice.clear();
        
        for (T t : all) {
            choice.add(t);
        }
        
        if (sort) {
            Collections.sort(choice);
            Collections.sort(chosen);            
        }
        
        choiceList.setListData(choice);
        chosenList.setListData(chosen);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptAllButton;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel choiceLabel;
    private javax.swing.JList choiceList;
    private javax.swing.JScrollPane choiceScrollPane;
    private javax.swing.JLabel chosenLabel;
    private javax.swing.JList chosenList;
    private javax.swing.JScrollPane chosenScrollPane;
    private javax.swing.JButton okButton;
    private javax.swing.JButton rejectAllButton;
    private javax.swing.JButton rejectButton;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    
    private final Vector<T> all;
    private final boolean sort;
    private Vector<T> choice;
    private Vector<T> chosen;
    private boolean okay;
}
